{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>Professor Bianco's Code</h1></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Assignment 2:\n",
    "    test if the distribution of ages is the same for \n",
    "    \n",
    "    1) male and female riders\n",
    "    \n",
    "    2) day and night riders\n",
    "    \n",
    "    use 3 tests: KS, Pearson's, Spearman's. \n",
    "    \n",
    "    For the KS do the test with the entire dataset and with a subset 200 times smaller\n",
    "    \n",
    "    Choose a significant threshold for the whole eercise. \n",
    "    \n",
    "    For each test phrase the Null Hypothesis in words.\n",
    "    \n",
    "    Describe the return of the scipy function you use in each case.\n",
    "    \n",
    "    State the result in terms of rejection of the Null."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "# my usual imports and setups\n",
    "import pylab as pl\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "#imports downloader\n",
    "from getCitiBikeCSV import getCitiBikeCSV\n",
    "\n",
    "%pylab inline\n",
    "\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# I am reading in data from January 2015. It would be a good idea to use data from warmer months, since there are more riders in the warm weather and the more data the smaller the STATISTICAL NOISE. You should use data from multiple months, joining multiple datasets, thus addressing systematic errors as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading 201501\n",
      "file in place, you can continue\n"
     ]
    }
   ],
   "source": [
    "datestring = '201501'\n",
    "getCitiBikeCSV(datestring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(os.getenv(\"PUIDATA\") + \"/\" + datestring + '-citibike-tripdata.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station name</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station name</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>usertype</th>\n",
       "      <th>birth year</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1346</td>\n",
       "      <td>1/1/2015 0:01</td>\n",
       "      <td>1/1/2015 0:24</td>\n",
       "      <td>455</td>\n",
       "      <td>1 Ave &amp; E 44 St</td>\n",
       "      <td>40.750020</td>\n",
       "      <td>-73.969053</td>\n",
       "      <td>265</td>\n",
       "      <td>Stanton St &amp; Chrystie St</td>\n",
       "      <td>40.722293</td>\n",
       "      <td>-73.991475</td>\n",
       "      <td>18660</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>363</td>\n",
       "      <td>1/1/2015 0:02</td>\n",
       "      <td>1/1/2015 0:08</td>\n",
       "      <td>434</td>\n",
       "      <td>9 Ave &amp; W 18 St</td>\n",
       "      <td>40.743174</td>\n",
       "      <td>-74.003664</td>\n",
       "      <td>482</td>\n",
       "      <td>W 15 St &amp; 7 Ave</td>\n",
       "      <td>40.739355</td>\n",
       "      <td>-73.999318</td>\n",
       "      <td>16085</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1963.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>346</td>\n",
       "      <td>1/1/2015 0:04</td>\n",
       "      <td>1/1/2015 0:10</td>\n",
       "      <td>491</td>\n",
       "      <td>E 24 St &amp; Park Ave S</td>\n",
       "      <td>40.740964</td>\n",
       "      <td>-73.986022</td>\n",
       "      <td>505</td>\n",
       "      <td>6 Ave &amp; W 33 St</td>\n",
       "      <td>40.749013</td>\n",
       "      <td>-73.988484</td>\n",
       "      <td>20845</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>182</td>\n",
       "      <td>1/1/2015 0:04</td>\n",
       "      <td>1/1/2015 0:07</td>\n",
       "      <td>384</td>\n",
       "      <td>Fulton St &amp; Waverly Ave</td>\n",
       "      <td>40.683178</td>\n",
       "      <td>-73.965964</td>\n",
       "      <td>399</td>\n",
       "      <td>Lafayette Ave &amp; St James Pl</td>\n",
       "      <td>40.688515</td>\n",
       "      <td>-73.964763</td>\n",
       "      <td>19610</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>969</td>\n",
       "      <td>1/1/2015 0:05</td>\n",
       "      <td>1/1/2015 0:21</td>\n",
       "      <td>474</td>\n",
       "      <td>5 Ave &amp; E 29 St</td>\n",
       "      <td>40.745168</td>\n",
       "      <td>-73.986831</td>\n",
       "      <td>432</td>\n",
       "      <td>E 7 St &amp; Avenue A</td>\n",
       "      <td>40.726218</td>\n",
       "      <td>-73.983799</td>\n",
       "      <td>20197</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tripduration      starttime       stoptime  start station id  \\\n",
       "0          1346  1/1/2015 0:01  1/1/2015 0:24               455   \n",
       "1           363  1/1/2015 0:02  1/1/2015 0:08               434   \n",
       "2           346  1/1/2015 0:04  1/1/2015 0:10               491   \n",
       "3           182  1/1/2015 0:04  1/1/2015 0:07               384   \n",
       "4           969  1/1/2015 0:05  1/1/2015 0:21               474   \n",
       "\n",
       "        start station name  start station latitude  start station longitude  \\\n",
       "0          1 Ave & E 44 St               40.750020               -73.969053   \n",
       "1          9 Ave & W 18 St               40.743174               -74.003664   \n",
       "2     E 24 St & Park Ave S               40.740964               -73.986022   \n",
       "3  Fulton St & Waverly Ave               40.683178               -73.965964   \n",
       "4          5 Ave & E 29 St               40.745168               -73.986831   \n",
       "\n",
       "   end station id             end station name  end station latitude  \\\n",
       "0             265     Stanton St & Chrystie St             40.722293   \n",
       "1             482              W 15 St & 7 Ave             40.739355   \n",
       "2             505              6 Ave & W 33 St             40.749013   \n",
       "3             399  Lafayette Ave & St James Pl             40.688515   \n",
       "4             432            E 7 St & Avenue A             40.726218   \n",
       "\n",
       "   end station longitude  bikeid    usertype  birth year  gender  \n",
       "0             -73.991475   18660  Subscriber      1960.0       2  \n",
       "1             -73.999318   16085  Subscriber      1963.0       1  \n",
       "2             -73.988484   20845  Subscriber      1974.0       1  \n",
       "3             -73.964763   19610  Subscriber      1969.0       1  \n",
       "4             -73.983799   20197  Subscriber      1977.0       1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station name</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station name</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>usertype</th>\n",
       "      <th>birth year</th>\n",
       "      <th>gender</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1346</td>\n",
       "      <td>1/1/2015 0:01</td>\n",
       "      <td>1/1/2015 0:24</td>\n",
       "      <td>455</td>\n",
       "      <td>1 Ave &amp; E 44 St</td>\n",
       "      <td>40.750020</td>\n",
       "      <td>-73.969053</td>\n",
       "      <td>265</td>\n",
       "      <td>Stanton St &amp; Chrystie St</td>\n",
       "      <td>40.722293</td>\n",
       "      <td>-73.991475</td>\n",
       "      <td>18660</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-01-01 00:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>363</td>\n",
       "      <td>1/1/2015 0:02</td>\n",
       "      <td>1/1/2015 0:08</td>\n",
       "      <td>434</td>\n",
       "      <td>9 Ave &amp; W 18 St</td>\n",
       "      <td>40.743174</td>\n",
       "      <td>-74.003664</td>\n",
       "      <td>482</td>\n",
       "      <td>W 15 St &amp; 7 Ave</td>\n",
       "      <td>40.739355</td>\n",
       "      <td>-73.999318</td>\n",
       "      <td>16085</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1963.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01 00:02:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>346</td>\n",
       "      <td>1/1/2015 0:04</td>\n",
       "      <td>1/1/2015 0:10</td>\n",
       "      <td>491</td>\n",
       "      <td>E 24 St &amp; Park Ave S</td>\n",
       "      <td>40.740964</td>\n",
       "      <td>-73.986022</td>\n",
       "      <td>505</td>\n",
       "      <td>6 Ave &amp; W 33 St</td>\n",
       "      <td>40.749013</td>\n",
       "      <td>-73.988484</td>\n",
       "      <td>20845</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01 00:04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>182</td>\n",
       "      <td>1/1/2015 0:04</td>\n",
       "      <td>1/1/2015 0:07</td>\n",
       "      <td>384</td>\n",
       "      <td>Fulton St &amp; Waverly Ave</td>\n",
       "      <td>40.683178</td>\n",
       "      <td>-73.965964</td>\n",
       "      <td>399</td>\n",
       "      <td>Lafayette Ave &amp; St James Pl</td>\n",
       "      <td>40.688515</td>\n",
       "      <td>-73.964763</td>\n",
       "      <td>19610</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01 00:04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>969</td>\n",
       "      <td>1/1/2015 0:05</td>\n",
       "      <td>1/1/2015 0:21</td>\n",
       "      <td>474</td>\n",
       "      <td>5 Ave &amp; E 29 St</td>\n",
       "      <td>40.745168</td>\n",
       "      <td>-73.986831</td>\n",
       "      <td>432</td>\n",
       "      <td>E 7 St &amp; Avenue A</td>\n",
       "      <td>40.726218</td>\n",
       "      <td>-73.983799</td>\n",
       "      <td>20197</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01 00:05:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tripduration      starttime       stoptime  start station id  \\\n",
       "0          1346  1/1/2015 0:01  1/1/2015 0:24               455   \n",
       "1           363  1/1/2015 0:02  1/1/2015 0:08               434   \n",
       "2           346  1/1/2015 0:04  1/1/2015 0:10               491   \n",
       "3           182  1/1/2015 0:04  1/1/2015 0:07               384   \n",
       "4           969  1/1/2015 0:05  1/1/2015 0:21               474   \n",
       "\n",
       "        start station name  start station latitude  start station longitude  \\\n",
       "0          1 Ave & E 44 St               40.750020               -73.969053   \n",
       "1          9 Ave & W 18 St               40.743174               -74.003664   \n",
       "2     E 24 St & Park Ave S               40.740964               -73.986022   \n",
       "3  Fulton St & Waverly Ave               40.683178               -73.965964   \n",
       "4          5 Ave & E 29 St               40.745168               -73.986831   \n",
       "\n",
       "   end station id             end station name  end station latitude  \\\n",
       "0             265     Stanton St & Chrystie St             40.722293   \n",
       "1             482              W 15 St & 7 Ave             40.739355   \n",
       "2             505              6 Ave & W 33 St             40.749013   \n",
       "3             399  Lafayette Ave & St James Pl             40.688515   \n",
       "4             432            E 7 St & Avenue A             40.726218   \n",
       "\n",
       "   end station longitude  bikeid    usertype  birth year  gender  \\\n",
       "0             -73.991475   18660  Subscriber      1960.0       2   \n",
       "1             -73.999318   16085  Subscriber      1963.0       1   \n",
       "2             -73.988484   20845  Subscriber      1974.0       1   \n",
       "3             -73.964763   19610  Subscriber      1969.0       1   \n",
       "4             -73.983799   20197  Subscriber      1977.0       1   \n",
       "\n",
       "                 date  \n",
       "0 2015-01-01 00:01:00  \n",
       "1 2015-01-01 00:02:00  \n",
       "2 2015-01-01 00:04:00  \n",
       "3 2015-01-01 00:04:00  \n",
       "4 2015-01-01 00:05:00  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df is the dataframe where the content of the csv file is stored\n",
    "df['date'] = pd.to_datetime(df['starttime'])\n",
    "# note that with dataframes I can refer to variables as dictionary keys, \n",
    "# i.e. df['starttime'] or as attributes: df.starttime. \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tripduration', 'starttime', 'stoptime', 'start station id',\n",
       "       'start station name', 'start station latitude',\n",
       "       'start station longitude', 'end station id', 'end station name',\n",
       "       'end station latitude', 'end station longitude', 'bikeid', 'usertype',\n",
       "       'birth year', 'gender', 'date'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BY GENDER\n",
    "splitting data by gender and extracting the age happens in the cell below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#df is the dataframe where the content of the csv file is stored\n",
    "df['ageM'] = 2015 - df['birth year'][(df['usertype'] == 'Subscriber') & (df['gender'] == 1)]\n",
    "df['ageF'] = 2015 - df['birth year'][(df['usertype'] == 'Subscriber') & (df['gender'] == 2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>gender</th>\n",
       "      <th>ageM</th>\n",
       "      <th>ageF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1346</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>363</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>346</td>\n",
       "      <td>1</td>\n",
       "      <td>41.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>182</td>\n",
       "      <td>1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>969</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tripduration  gender  ageM  ageF\n",
       "0          1346       2   NaN  55.0\n",
       "1           363       1  52.0   NaN\n",
       "2           346       1  41.0   NaN\n",
       "3           182       1  46.0   NaN\n",
       "4           969       1  38.0   NaN"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dropping some data I no longer need\n",
    "df = df[[\"tripduration\", \"gender\", \"ageM\", \"ageF\"]]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/numpy/lib/function_base.py:3403: RuntimeWarning: Invalid value encountered in median\n",
      "  RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>gender</th>\n",
       "      <th>ageM</th>\n",
       "      <th>ageF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>285552.000000</td>\n",
       "      <td>285552.000000</td>\n",
       "      <td>227764.000000</td>\n",
       "      <td>52093.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>654.325583</td>\n",
       "      <td>1.162485</td>\n",
       "      <td>40.305272</td>\n",
       "      <td>38.951145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>900.775928</td>\n",
       "      <td>0.419490</td>\n",
       "      <td>11.595240</td>\n",
       "      <td>11.405112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>17.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>334.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>504.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>772.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>43023.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>116.000000</td>\n",
       "      <td>89.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        tripduration         gender           ageM          ageF\n",
       "count  285552.000000  285552.000000  227764.000000  52093.000000\n",
       "mean      654.325583       1.162485      40.305272     38.951145\n",
       "std       900.775928       0.419490      11.595240     11.405112\n",
       "min        60.000000       0.000000      16.000000     17.000000\n",
       "25%       334.000000       1.000000            NaN           NaN\n",
       "50%       504.000000       1.000000            NaN           NaN\n",
       "75%       772.000000       1.000000            NaN           NaN\n",
       "max     43023.000000       2.000000     116.000000     89.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#your df should look something like this\n",
    "# look at these data carefully... you may see someinteresting values!\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# dropping NaN values\n",
    "df['ageM'].dropna(inplace= True)\n",
    "df['ageF'].dropna(inplace= True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lets split age in 10 year bins. the dataset is very large, so i could be split in smaller bins, but I will chose 10 years in the interest of time. \n",
    "the bin size choice should be a balance between properly sample the age space, have enough counts in each bin that the statistical noise is not significant (remember that is > sqrt(N)!) and the computational requirement to computatinal facilities ratio. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the next several steps are needed if you want to code up the KS test from scratch. that is for extra credit, so if you do not want to do it you may not need to plot split the distribution in bins and create the cumulative HOWEVER it is a great idea to do it anyways to explore your data viaually! remember Ascombe's quartet!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f7fb0800390>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7fb10b7780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7fb10b7550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting histogramswith pandas is a bitdifferent than with pylab\n",
    "# this is a VERY USEFUL syntaxfor you to knonw!\n",
    "bins = np.arange(10, 99, 5)\n",
    "axM = df.ageM.groupby(pd.cut(df.ageM, bins)).agg([count_nonzero]).plot(kind='bar', \n",
    "                                                                legend=False)\n",
    "axM.set_title(\"male riders\")\n",
    "axF = df.ageF.groupby(pd.cut(df.ageF, bins)).agg([count_nonzero]).plot(kind='bar',\n",
    "                                                                legend=False)\n",
    "axF.set_title(\"female riders\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Figure 1: histogrammed distribution of riders' ages by gender"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "this is how the cumulative distributions look like.  Notice that i am normalizing them! if i want to reat an observed distribution like a probablility distribution i have to normalize it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          count_nonzero\n",
      "ageM                   \n",
      "(10, 15]       0.000000\n",
      "(15, 20]       0.001657\n",
      "(20, 25]       0.010955\n",
      "(25, 30]       0.060955\n",
      "(30, 35]       0.065548\n",
      "(35, 40]       0.052146\n",
      "(40, 45]       0.031750\n",
      "(45, 50]       0.018657\n",
      "(50, 55]       0.011015\n",
      "(55, 60]       0.010957\n",
      "(60, 65]       0.008149\n",
      "(65, 70]       0.003203\n",
      "(70, 75]       0.000663\n",
      "(75, 80]       0.000188\n",
      "(80, 85]       0.000002\n",
      "(85, 90]       0.000075\n",
      "(90, 95]       0.000000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f7faf1869e8>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n0AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7fb07cf1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#print df.ageS, df.ageS.cumsum()\n",
    "\n",
    "csM=df.ageM.groupby(pd.cut(df.ageM, bins)).agg([count_nonzero]).cumsum()\n",
    "\n",
    "csF=df.ageF.groupby(pd.cut(df.ageF, bins)).agg([count_nonzero]).cumsum()\n",
    "\n",
    "print (np.abs(csM / csM.max()-csF / csF.max()))\n",
    "\n",
    "pl.plot(bins[:-1] + 5, csM / csM.max(), label = \"M\")\n",
    "pl.plot(bins[:-1] + 5, csF / csF.max(), label = \"F\")\n",
    "pl.plot(bins[:-1] + 5, np.sqrt(csF / csF.max() - csM / csM.max())**2, 'k-',\n",
    "        label = \"difference\")\n",
    "pl.xlabel(\"Age\")\n",
    "pl.ylabel(\"Normalized Cumulative Number\")\n",
    "pl.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Figure 2: the cumulative distribution of CitiBike riders' ages by gender"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They look similar! But the difference gets to 10%. If I wanted to code the KS test by hand I woud have everything I need: the normalized cumulative distributions can be subtracted from each other and the max distance can calculated. \n",
    "\n",
    "Notice that there amay be Nan values you are gonna have to deal with! \n",
    "You can do that for example with a Boolean statementsuch as  df.ageF[~np.isnan(df.ageF)] or you can use numpy functions that deal with Nan values: nansum, nanmean, nanstd..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lets run the scipy KS test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import scipy.stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# KS tests to compare 2 samples\n",
    "\n",
    "http://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.stats.ks_2samp.html\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ks_2sampResult(statistic=0.067442557802207204, pvalue=4.0408611999082294e-168)\n"
     ]
    }
   ],
   "source": [
    "ks = scipy.stats.ks_2samp(df.ageM, df.ageF)\n",
    "print (ks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The scipy.stats KS test already tells me the significance and the p-value. I recalculate it for a reality check.\n",
    "\n",
    "Remember: the Null hypothesis is rejected if \n",
    "\n",
    "$D_KS(n1,n2) > c(\\alpha) \\sqrt{\\frac{(n1 + n2)}{n1n2}}$\n",
    "\n",
    "where $c(\\alpha$) is the inverse of the KS distribution, and you do not have to know how to get that cause there are tables that list critical values!! \n",
    "\n",
    "http://www.real-statistics.com/tests-normality-and-symmetry/statistical-tests-normality-symmetry/kolmogorov-smirnov-test/kolmogorov-distribution/\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1106.1676246107415"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# notice that the factor is very large!! its gonna be hard to get a stat larger than that!\n",
    "np.sqrt((len(df['ageF']) + len(df['ageM']))/len(df['ageF']) * len(df['ageM']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#here is the critical values tablel. Have you chosen your significance level yet?? you should do it first thing!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://render.githubusercontent.com/render/math?math=D_KS%28n1%2Cn2%29%20%26gt%3B%20c%28%5Calpha%29%20%5Csqrt%7B%5Cfrac%7B%28n1%20%2B%20n2%29%7D%7Bn1n2%7D%7D&mode=inline\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>My Code</h1></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FILL IN THE CELLS BELOW!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## your words here!...\n",
    "## this cell is for you to tell me what the scipy KS test returned and what it means in terms of NULL HYPOTHESIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The KS test returned an extremely small p-value, which means that we reject the null hypothesis that the underlying distribution is the same for both `ageF` and `ageM`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now redo the test with a subsample of the data: take only 1 ride every of 200 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1428, 4)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## your words here!...\n",
    "## this cell is for you to redo the test with reducted dataset \n",
    "## and tell me what the scipy KS test returned and what it means in terms of NULL HYPOTHESIS\n",
    "df_ks = df.iloc[np.arange(1, 285552, 200)]\n",
    "df_ks.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ks_2sampResult(statistic=0.59243697478991597, pvalue=4.027963927017588e-220)\n"
     ]
    }
   ],
   "source": [
    "ks2 = scipy.stats.ks_2samp(df_ks.ageM, df_ks.ageF)\n",
    "print (ks2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Kolmogorov-Smirnov test for the reducted dataset with $n=1428$ returned a p-value much smaller than the previous test, which means that we reject the null hypothesis that `AgeF` and `AgeM` have the same underlying cumulative distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pearson's  test for correlation\n",
    "\n",
    "## notice that the Pearson's is a pairwise test: the samples need to be \n",
    "## a. sorted and \n",
    "## b. the same size!\n",
    "\n",
    "http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# your code here!\n",
    "# wrangle the data as needed\n",
    "# please perform the Pearson's test \n",
    "# and tell me what you find in terms of NULL hypothesis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function pearsonr in module scipy.stats.stats:\n",
      "\n",
      "pearsonr(x, y)\n",
      "    Calculates a Pearson correlation coefficient and the p-value for testing\n",
      "    non-correlation.\n",
      "    \n",
      "    The Pearson correlation coefficient measures the linear relationship\n",
      "    between two datasets. Strictly speaking, Pearson's correlation requires\n",
      "    that each dataset be normally distributed, and not necessarily zero-mean.\n",
      "    Like other correlation coefficients, this one varies between -1 and +1\n",
      "    with 0 implying no correlation. Correlations of -1 or +1 imply an exact\n",
      "    linear relationship. Positive correlations imply that as x increases, so\n",
      "    does y. Negative correlations imply that as x increases, y decreases.\n",
      "    \n",
      "    The p-value roughly indicates the probability of an uncorrelated system\n",
      "    producing datasets that have a Pearson correlation at least as extreme\n",
      "    as the one computed from these datasets. The p-values are not entirely\n",
      "    reliable but are probably reasonable for datasets larger than 500 or so.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    x : (N,) array_like\n",
      "        Input\n",
      "    y : (N,) array_like\n",
      "        Input\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    (Pearson's correlation coefficient,\n",
      "     2-tailed p-value)\n",
      "    \n",
      "    References\n",
      "    ----------\n",
      "    http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(scipy.stats.pearsonr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "max_ageF = len(df[\"ageF\"].dropna())\n",
    "sorted_ageF = sort(df[\"ageF\"].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# I've found that different ways of subsetting the data affects the p-value\n",
    "r_val = []; p_val = []\n",
    "for i in range(1,200):\n",
    "    np.random.seed(i)\n",
    "    ind = np.random.randint(1, max_ageF, max_ageF)\n",
    "    sorted_ageM = sort(df[\"ageM\"].dropna())[ind]\n",
    "    pear = scipy.stats.pearsonr(sorted_ageF, sorted_ageM)\n",
    "    r_val.append(pear[0])\n",
    "    p_val.append(pear[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r: 0.0002786071157069399 p-value: 0.5501934336693434\n"
     ]
    }
   ],
   "source": [
    "print(\"r: {}\".format(np.mean(r_val)), \"p-value: {}\".format(np.mean(p_val)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Pearson's test for correlation examines whether if there exists a linear relationship between two populations. We assume that `AgeF` and `AgeM` are normally distributed. The null hypothesis of this test is that there are no linear relationship between `AgeF` and `AgeM`, i.e., $\\rho=0$, and the alternative hypothesis of this test is that there exists a linear relationship with Pearson's correlation $\\rho \\neq 0$.\n",
    "\n",
    "### Because the test result varies for different methods of subsetting the `AgeM` data to match the smaller size of `AgeF`, we take the average values from 200 tests and conclude that because $p=0.55>\\alpha=0.05$, we cannot reject the null hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spearman's  test for correlation\n",
    "\n",
    "http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# your code here!\n",
    "# wrangle the data as needed\n",
    "# please perform the Spearman's test and tell me what you find in terms of NULL hypothesis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function spearmanr in module scipy.stats.stats:\n",
      "\n",
      "spearmanr(a, b=None, axis=0, nan_policy='propagate')\n",
      "    Calculates a Spearman rank-order correlation coefficient and the p-value\n",
      "    to test for non-correlation.\n",
      "    \n",
      "    The Spearman correlation is a nonparametric measure of the monotonicity\n",
      "    of the relationship between two datasets. Unlike the Pearson correlation,\n",
      "    the Spearman correlation does not assume that both datasets are normally\n",
      "    distributed. Like other correlation coefficients, this one varies\n",
      "    between -1 and +1 with 0 implying no correlation. Correlations of -1 or\n",
      "    +1 imply an exact monotonic relationship. Positive correlations imply that\n",
      "    as x increases, so does y. Negative correlations imply that as x\n",
      "    increases, y decreases.\n",
      "    \n",
      "    The p-value roughly indicates the probability of an uncorrelated system\n",
      "    producing datasets that have a Spearman correlation at least as extreme\n",
      "    as the one computed from these datasets. The p-values are not entirely\n",
      "    reliable but are probably reasonable for datasets larger than 500 or so.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    a, b : 1D or 2D array_like, b is optional\n",
      "        One or two 1-D or 2-D arrays containing multiple variables and\n",
      "        observations. When these are 1-D, each represents a vector of\n",
      "        observations of a single variable. For the behavior in the 2-D case,\n",
      "        see under ``axis``, below.\n",
      "        Both arrays need to have the same length in the ``axis`` dimension.\n",
      "    axis : int or None, optional\n",
      "        If axis=0 (default), then each column represents a variable, with\n",
      "        observations in the rows. If axis=1, the relationship is transposed:\n",
      "        each row represents a variable, while the columns contain observations.\n",
      "        If axis=None, then both arrays will be raveled.\n",
      "    nan_policy : {'propagate', 'raise', 'omit'}, optional\n",
      "        Defines how to handle when input contains nan. 'propagate' returns nan,\n",
      "        'raise' throws an error, 'omit' performs the calculations ignoring nan\n",
      "        values. Default is 'propagate'.\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    correlation : float or ndarray (2-D square)\n",
      "        Spearman correlation matrix or correlation coefficient (if only 2\n",
      "        variables are given as parameters. Correlation matrix is square with\n",
      "        length equal to total number of variables (columns or rows) in a and b\n",
      "        combined.\n",
      "    pvalue : float\n",
      "        The two-sided p-value for a hypothesis test whose null hypothesis is\n",
      "        that two sets of data are uncorrelated, has same dimension as rho.\n",
      "    \n",
      "    Notes\n",
      "    -----\n",
      "    Changes in scipy 0.8.0: rewrite to add tie-handling, and axis.\n",
      "    \n",
      "    References\n",
      "    ----------\n",
      "    \n",
      "    .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n",
      "       Probability and Statistics Tables and Formulae. Chapman & Hall: New\n",
      "       York. 2000.\n",
      "       Section  14.7\n",
      "    \n",
      "    Examples\n",
      "    --------\n",
      "    >>> from scipy import stats\n",
      "    >>> stats.spearmanr([1,2,3,4,5], [5,6,7,8,7])\n",
      "    (0.82078268166812329, 0.088587005313543798)\n",
      "    >>> np.random.seed(1234321)\n",
      "    >>> x2n = np.random.randn(100, 2)\n",
      "    >>> y2n = np.random.randn(100, 2)\n",
      "    >>> stats.spearmanr(x2n)\n",
      "    (0.059969996999699973, 0.55338590803773591)\n",
      "    >>> stats.spearmanr(x2n[:,0], x2n[:,1])\n",
      "    (0.059969996999699973, 0.55338590803773591)\n",
      "    >>> rho, pval = stats.spearmanr(x2n, y2n)\n",
      "    >>> rho\n",
      "    array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],\n",
      "           [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],\n",
      "           [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],\n",
      "           [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])\n",
      "    >>> pval\n",
      "    array([[ 0.        ,  0.55338591,  0.06435364,  0.53617935],\n",
      "           [ 0.55338591,  0.        ,  0.27592895,  0.80234077],\n",
      "           [ 0.06435364,  0.27592895,  0.        ,  0.73039992],\n",
      "           [ 0.53617935,  0.80234077,  0.73039992,  0.        ]])\n",
      "    >>> rho, pval = stats.spearmanr(x2n.T, y2n.T, axis=1)\n",
      "    >>> rho\n",
      "    array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],\n",
      "           [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],\n",
      "           [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],\n",
      "           [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])\n",
      "    >>> stats.spearmanr(x2n, y2n, axis=None)\n",
      "    (0.10816770419260482, 0.1273562188027364)\n",
      "    >>> stats.spearmanr(x2n.ravel(), y2n.ravel())\n",
      "    (0.10816770419260482, 0.1273562188027364)\n",
      "    \n",
      "    >>> xint = np.random.randint(10, size=(100, 2))\n",
      "    >>> stats.spearmanr(xint)\n",
      "    (0.052760927029710199, 0.60213045837062351)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(scipy.stats.spearmanr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "max_ageF = len(df[\"ageF\"].dropna())\n",
    "sorted_ageF = sort(df[\"ageF\"].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# The same goes for Spearman's test\n",
    "rs_val = []; p_val2 = []\n",
    "for i in range(1,200):\n",
    "    np.random.seed(i)\n",
    "    ind = np.random.randint(1, max_ageF, max_ageF)\n",
    "    sorted_ageM = sort(df[\"ageM\"].dropna())[ind]\n",
    "    pear = scipy.stats.spearmanr(sorted_ageF, sorted_ageM)\n",
    "    rs_val.append(pear[0])\n",
    "    p_val2.append(pear[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r: 0.00027692002913091724 p-value: 0.5627106661334538\n"
     ]
    }
   ],
   "source": [
    "print(\"r: {}\".format(np.mean(rs_val)), \"p-value: {}\".format(np.mean(p_val2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## please comment on the numbers that you get in the light of the scipy manual: what is rerutned? what does it mean??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Spearman's correlation coefficient $r_s$ is a statistical measure that examines the strength of the monotonic relationship between paired data. The null hypothesis for Spearman's test is that there is no monotonic relationship between `AgeF` and `AgeM`, i.e., $\\rho_s=0$. \n",
    "\n",
    "### Like the Pearson's test, we take the average values from 200 tests and conclude that because $p=0.56>\\alpha=0.05$, we cannot reject the null hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EXTRA CREDIT:  CHOOSE ONE OF THE TESTS, AND TEST THE CORRELATION OF AGES  OF RIDERS DURING THE DAY VS DURING THE NIGHT!\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading 201509\n",
      "file in place, you can continue\n"
     ]
    }
   ],
   "source": [
    "# Get data from June 2015\n",
    "datestring = '201509'\n",
    "getCitiBikeCSV(datestring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df2 = pd.read_csv(os.getenv(\"PUIDATA\") + \"/\" + datestring + '-citibike-tripdata.csv').dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "get_isDay = lambda x: 1 if (int(x[-8:-6]) <= 12) else 0\n",
    "df2[\"isDay\"] = df2[\"starttime\"].apply(get_isDay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df2 = df2[df2[\"usertype\"] == \"Subscriber\"]\n",
    "df2 = df2[[\"isDay\", \"birth year\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df2[\"riderD\"] = 2015 - df2[\"birth year\"][df2[\"isDay\"] == 1]\n",
    "df2[\"riderN\"] = 2015 - df2[\"birth year\"][df2[\"isDay\"] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isDay</th>\n",
       "      <th>birth year</th>\n",
       "      <th>riderD</th>\n",
       "      <th>riderN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1989.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1955.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   isDay  birth year  riderD  riderN\n",
       "0      1      1989.0    26.0     NaN\n",
       "1      1      1987.0    28.0     NaN\n",
       "3      1      1992.0    23.0     NaN\n",
       "4      1      1976.0    39.0     NaN\n",
       "5      1      1955.0    60.0     NaN"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/rh/anaconda/root/envs/PUI2016_Python3/lib/python3.5/site-packages/numpy/lib/function_base.py:3403: RuntimeWarning: Invalid value encountered in median\n",
      "  RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isDay</th>\n",
       "      <th>birth year</th>\n",
       "      <th>riderD</th>\n",
       "      <th>riderN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.079586e+06</td>\n",
       "      <td>1.079586e+06</td>\n",
       "      <td>419015.000000</td>\n",
       "      <td>660571.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.881256e-01</td>\n",
       "      <td>1.977307e+03</td>\n",
       "      <td>38.206845</td>\n",
       "      <td>37.366979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.873237e-01</td>\n",
       "      <td>1.150723e+01</td>\n",
       "      <td>11.562485</td>\n",
       "      <td>11.460108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.885000e+03</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.969000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.980000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.986000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.999000e+03</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>130.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              isDay    birth year         riderD         riderN\n",
       "count  1.079586e+06  1.079586e+06  419015.000000  660571.000000\n",
       "mean   3.881256e-01  1.977307e+03      38.206845      37.366979\n",
       "std    4.873237e-01  1.150723e+01      11.562485      11.460108\n",
       "min    0.000000e+00  1.885000e+03      16.000000      16.000000\n",
       "25%    0.000000e+00  1.969000e+03            NaN            NaN\n",
       "50%    0.000000e+00  1.980000e+03            NaN            NaN\n",
       "75%    1.000000e+00  1.986000e+03            NaN            NaN\n",
       "max    1.000000e+00  1.999000e+03     130.000000     130.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ks_2sampResult(statistic=0.22374873331073203, pvalue=0.0)\n"
     ]
    }
   ],
   "source": [
    "ks3 = scipy.stats.ks_2samp(df2.riderD, df2.riderN)\n",
    "print(ks3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Kolmogorov-Smirnov test for `riderD` and `riderN` returned a p-value of zero, which means that we reject the null hypothesis that `riderD` and `riderN` have the same underlying cumulative distribution. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PUI2016_Python3",
   "language": "python",
   "name": "pui2016_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
